 /*
 * SPI interface for DRV8704 Dual H-Bridge Controller
 * 
 * 
 * The circuit 
 * - SCLK: to SCK(ICSP-3) or digital pin 13
 * - SDATI: MOSI(ICSP-4) or digital pin 11
 * - SCS: 10 (slave select pin)
 * - SDATO: MISO(ICSP-1) or digital pin 12
 * 
 * by REV Motor Controller Team 
 */

#include <SPI.h>
#include<Arduino.h>
#define DATAOUT 11 //MOSI
#define DATAIN 12 //MISO
#define SPICLK 13//sclk
#define SCS 10 //slave select

//DRV8704's register addresses
const int CTRL = 0x0;
const int TORQUE = 0x1;
const int OFF = 0x2;
const int BLANK = 0x3;
const int DECAY = 0x4;
const int DRIVE = 0x6;
const int STATUS = 0x7;

//store values at each register, to compare to desired values
unsigned int currentRegisterValues[8];

 
//**** Configure the Motor Driver's Settings ****//
void setup(){

  //Open serial monitor
  Serial.begin(9600);

  //set input and output pins
  pinMode(SCS, OUTPUT);
  pinMode(DATAOUT, OUTPUT);
  pinMode(DATAIN, INPUT);
  pinMode(SPICLK, OUTPUT);

  //Set up SPI transaction
  SPI.beginTransaction(SPISettings(140000, MSBFIRST, SPI_MODE0));

}


// Write to SPI addresses 
void spiWriteReg(unsigned int address, unsigned int value){ 
/*
  Write to register over SPI using Arduino SPI library.

  Args: address -> int 0xX where X <= 7, value > int to be written (as binary) to register. Only 
  lower 12 bits used. 

  Example:  spiWriteReg(0x6, 0x0FF0);

*/

  //take the SCS pin high to select the chip 
  digitalWrite(SCS, HIGH);

  //only lowest 3 bits matter in the address. Disregard others
  address = address << 12;

  //Write/Read bit(15) needs to be 0 for a write operation on DRV
  address &= ~0x8000;
  value |= address; // 16-bit data to be sent 
  SPI.transfer16(value);

  // take the SCS pin low to de-select the chip 
  digitalWrite(SCS, LOW);
} 


unsigned int spiReadReg(unsigned int address){
/*
Read from a register over SPI using Arduino SPI library.

Args: address -> int 0xX where X <= 7
Return: integer representing register value. 

Example:  data = spiReadReg(0x6);
*/
  
  // take the SCS pin high to select the chip 
  // Write/Read bit(15) needs to be 1 for a read
  unsigned int data;    
  unsigned int value;

  digitalWrite(SCS, HIGH);
  address = (address << 12); 
  address |= 0x8000; //bit mask to set MSB to 1
  
  value = SPI.transfer16(address);  // read from address 
  
  // take the SCS pin low to de-select the chip 
  digitalWrite(SCS, LOW);
  return value;
  } 
   

void spiGetCurrentRegisterValues (){
/*
Populate currentRegisterValues variable with the integers returned from
spiReadReg at each memory register 0-7.
*/

  //populate currentRegisterValues array 
  for (int i = 0; i < 7; i++){
      read_at_index = spiReadReg(i);
      currentRegisterValues[i] = read_at_index;
  }    
}
   
  
void loop(){



}


  